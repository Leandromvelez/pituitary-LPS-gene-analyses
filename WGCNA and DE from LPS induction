setwd('')  #Set working directory where files needed are stored

library(WGCNA)
library(reshape2)
library(factoextra)
library(dplyr)
library(MetBrewer)
library(pheatmap)
library(colormap)
library(pcaMethods)
library(qgraph)
library(limma)
library(add2ggplot)
library(ggrepel)
allowWGCNAThreads()

expr_data = read.csv('20201006_lawson_nicholas_inflammation-in-polycystic-ovary-syndrome_rnaseq_data_exploration_20201106105257_filtered_pc_genes_tmm_normed_cpms_annot.csv')
met_dat = read.csv('20201006_lawson_nicholas_inflammation-in-polycystic-ovary-syndrome_rnaseq_data_integration_20201027095641_metadata.csv')
trait_data = read.csv('20201006_lawson_nicholas_Additional variables.csv')
traits = trait_data[1:9,]
row.names(traits) = traits$Variable
traits$Variable=NULL
melt_traits = melt(as.matrix(traits))
colnames(melt_traits) = c('trait', 'sample', 'value')
melt_traits$value = as.numeric(sub('%', '', melt_traits$value, fixed = T))

new_traits = dcast(melt_traits, sample ~ trait, value.var = 'value', fun.aggregate = mean)
row.names(new_traits) = new_traits$sample
new_traits$sample=NULL
new_traits$LPS_log2 = log2(new_traits$`Dose LPS`)
new_traits$LPS_log2 = as.numeric(ifelse(new_traits$LPS_log2 < -11, '-20', paste0(new_traits$LPS_log2)))
new_traits$`Dose LPS`=NULL
dat1 = expr_data[!is.na(expr_data$SYMBOL),]
row.names(dat1) = toupper(dat1$X)
dat1$SYMBOL=NULL
dat1$X=NULL
dat1$gene_type=NULL
melt_dat = reshape2::melt(as.matrix(dat1))
colnames(melt_dat) = c('ENS', 'Sample_ID', 'value')
melt_dat$gene_symbol = expr_data$SYMBOL[match(melt_dat$ENS, expr_data$X)]
new_cnts = dcast(melt_dat, Sample_ID ~ gene_symbol, value.var = 'value', fun.aggregate = mean)
row.names(new_cnts) = new_cnts$Sample_ID
new_cnts$Sample_ID=NULL
datExpr0 = new_cnts
options(stringsAsFactors = FALSE)
gsg = goodSamplesGenes(datExpr0, verbose = 3);
gsg$allOK
#FALSE
if (!gsg$allOK)
{
  # Optionally, print the gene and sample names that were removed:
  if (sum(!gsg$goodGenes)>0)
    printFlush(paste("Removing genes:", paste(names(datExpr0)[!gsg$goodGenes], collapse = ", ")));
  if (sum(!gsg$goodSamples)>0)
    printFlush(paste("Removing samples:", paste(rownames(datExpr0)[!gsg$goodSamples], collapse = ", ")));
  # Remove the offending genes and samples from the data:
  datExpr0 = datExpr0[gsg$goodSamples, gsg$goodGenes]
}

sampleTree = hclust(dist(datExpr0), method = "average")
clust = cutreeStatic(sampleTree)
table(clust)
# sample size too low to cut sampels.
keepSamples = (clust==0)
datExpr = datExpr0[keepSamples, ]
nGenes = ncol(datExpr)
nSamples = nrow(datExpr)

collectGarbage()
# Re-cluster samples
sampleTree2 = hclust(dist(datExpr), method = "average")
# Convert traits to a color representation: white means low, red means high, grey means missing entry
datTraits = new_traits

traitColors = numbers2colors(datTraits, signed = FALSE)
# Plot the sample dendrogram and the colors underneath.
pdf(file = 'sample dendrogram with traits.pdf')
plotDendroAndColors(sampleTree2, traitColors,
                    groupLabels = names(datTraits),
                    main = "Sample dendrogram and trait heatmap")
dev.off()


powers = c(c(1:10), seq(from = 12, to=20, by=2))
# Call the network topology analysis function
sft = pickSoftThreshold(datExpr, powerVector = powers, verbose = 5)
# Plot the results:
pdf(file = 'soft thresholding and mean connectivity.pdf')
sizeGrWindow(9, 5)
par(mfrow = c(1,2))
cex1 = 0.9
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
     xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
     main = paste("Scale independence"))
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
     labels=powers,cex=1,col="red")
# this line corresponds to using an R^2 cut-off of h
abline(h=0.8,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5],
     xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
     main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=1,col="red")
dev.off()

#This is the part where we should play around a bit
net = blockwiseModules(datExpr, power = 6, maxBlockSize = 2000,
                       TOMType = "unsigned", minModuleSize = 200,
                       reassignThreshold = 0.02, mergeCutHeight = 0.2,
                       numericLabels = TRUE, pamRespectsDendro = FALSE,
                       saveTOMs = F,
                       verbose = 3)

table(net$colors)

moduleLabels = net$colors
moduleColors = labels2colors(net$colors)
MEs = net$MEs;
nGenes = ncol(datExpr);
nSamples = nrow(datExpr);

length(net$colors)

MEDiss = 1-cor(MEs);
# Cluster module eigengenes
METree = hclust(as.dist(MEDiss), method = "average");
# Plot the result
pdf(file = 'Eigengene clustering.pdf')
sizeGrWindow(7, 6)
plot(METree, main = "Clustering of module eigengenes",
     xlab = "", sub = "")
dev.off()

all_tog1 = MEs
#remove gray module
all_tog1$ME0=NULL
all_tog1$sample = row.names(all_tog1)
all_tog1$sample=NULL

all_tog1 = merge(all_tog1, datTraits,by = 'row.names', all = TRUE)

module_membership = as.data.frame(net$colors)
colnames(module_membership) = 'module'
module_membership$gene = row.names(module_membership)
module_membership = module_membership[!module_membership$module==0,]
## modules and genes per module count
table(module_membership$module)

new1 = bicorAndPvalue(all_tog1, datExpr, use = 'p')
new_set = melt(new1$bicor)
colnames(new_set) = c('module', 'gene', 'bicor')
cc1 = melt(new1$p)
new_set$p = cc1$value
new_set$modnum = gsub('ME', '', new_set$module)
new_set$modnum = as.numeric(new_set$modnum)
new_set$mmod_assign = module_membership$module[match(new_set$gene, module_membership$gene)]
new_set = na.omit(new_set)
head(new_set)
new_set = new_set[new_set$modnum==new_set$mmod_assign,]

head(module_membership)
module_membership$gene_mod = paste0(module_membership$gene, '_', module_membership$module)
new_set$gene_mod = paste0(new_set$gene, '_', new_set$modnum)
module_membership$module_bicor = new_set$bicor[match(module_membership$gene_mod, new_set$gene_mod)]
module_membership$module_pvalue = new_set$p[match(module_membership$gene_mod, new_set$gene_mod)]
qvals = qvalue::qvalue(module_membership$module_pvalue)
module_membership$module_qvalue =qvals$qvalues
module_membership$log10module_qvalue = -log10(module_membership$module_qvalue)
module_membership$gene_mod=NULL

write.csv(module_membership, file='Module membership of all genes.csv', row.names=F)




#Example to subset specific module genes - here for module 1
mod_genes = module_membership$gene[module_membership$module==1]

#Keep these to plot proportions of genes per category - go term or differential expression
#proportions_table = module_membership %>%
#  group_by(data_type, module) %>%
#  summarise(n = n()) %>%
#  mutate(freq = n / sum(n))

#ggplot(proportions_table, aes(x=module, y=freq, fill=data_type)) + geom_col() + theme_classic()
all_tog1 = MEs
#remove gray module
all_tog1$ME0=NULL
all_tog1$sample = row.names(all_tog1)
all_tog1$sample=NULL

all_tog1 = merge(all_tog1, datTraits,by = 'row.names', all = TRUE)

row.names(all_tog1) = all_tog1$Row.names
all_tog1$Row.names=NULL
all_tog1$sample=NULL
bics_map = bicorAndPvalue(all_tog1, all_tog1, use = 'p')
map1 = as.data.frame(bics_map$bicor)
map1 = melt(as.matrix(map1))
map1$value[map1$value > 0.999999] <- 0
map2 = dcast(map1, Var1 ~ Var2, value.var = 'value')
row.names(map2) = map2$Var1
map2$Var1 = NULL
col_key = colnames(map2)

new_cols = ifelse(grepl('ME', col_key), 'grey10', met.brewer("Redon"))
new_labs = as.data.frame(colnames(map2))
#new_labs$new_lab = goID$new_GO[match(new_labs$`colnames(map2)`, goID$ME)]
#new_labs1 = ifelse(is.na(new_labs$new_lab), paste0(new_labs$`colnames(map2)`), paste0(new_labs$new_lab))
pdf(file = 'Undirected network 18 modules.pdf')
qgraph(map2, minimum = 0.4, cut = 0.9, vsize = 5, legend = F, borders = FALSE, layout='spring', posCol = "dodgerblue3", negCol = "firebrick3", label.cex=1, directed=F, color=new_cols)
dev.off()

#heatmap of modules and traits
all_tog2 = MEs
#remove gray module
all_tog2$ME0=NULL
all_tog2$sample = row.names(all_tog1)
all_tog2$sample=NULL
datTraits$sample = row.names(datTraits)
traits1 = datTraits
traits1$sample=NULL

ords1 = as.data.frame(colnames(all_tog2))
colnames(ords1) = 'ME'
ords1$mod_num = gsub('ME', '', ords1$ME)
ords1$mod_num = as.numeric(ords1$mod_num)
ords1 = ords1[order(ords1$mod_num, decreasing = F),]
all_tog2 = all_tog2[ords1$ME]
heat_cor = bicorAndPvalue(all_tog2, traits1, use = 'p')
heat_table = -log10(heat_cor$p)
heat_p = heat_cor$p
heat_annot = ifelse(heat_p<0.1, '*', '')

row.names(heat_annot)
#plot
pdf(file = 'Module eigengene x trait cors.pdf')
pheatmap(heat_table, fontsize_number = 20, display_numbers = heat_annot, number_color = "black", color = rev(colormap(colormap = colormaps$greens, nshades = 50)), cluster_rows = F, cluster_cols = F,  main='Module eigengene x trait cors', fontsize_row = 5, fontsize_col = 5)
dev.off()



##############################################################################################
#perform DE

new_cnts = dcast(melt_dat, Sample_ID ~ gene_symbol, value.var = 'value', fun.aggregate = mean)
row.names(new_cnts) = new_cnts$Sample_ID
new_cnts$Sample_ID=NULL


cnts_mat = reshape2::melt(as.matrix(new_cnts))
summary(cnts_mat$value)

head(cnts_mat)
cnts_mat$lvalue = log2(cnts_mat$value)
cnts_mat = dcast(cnts_mat, Var1 ~ Var2, value.var = 'lvalue', fun.aggregate = mean)
row.names(cnts_mat) = cnts_mat$Var1
cnts_mat$Var1=NULL

cnts_mat$dm = ifelse(grepl('PBS', row.names(new_cnts)), 'Cntl', 'LPS')
cnts_mat$dm = factor(cnts_mat$dm, levels=c('Cntl', 'LPS'))
table(cnts_mat$dm)
design = model.matrix(~dm, data=cnts_mat)
head(design)
table(cnts_mat$dm)
dim(design)
new_cnts1 = as.data.frame(t(cnts_mat[, !colnames(cnts_mat)=='dm']))
fit = lmFit(new_cnts1, design)
fit = eBayes(fit)
row.names(fit)[1:10]

res_table = topTable(fit, coef=NULL,number=Inf, genelist=row.names(fit), adjust.method="BH",
                     sort.by="B", resort.by=NULL, p.value=1, lfc=0, confint=FALSE)
head(res_table)
test1 = as.data.frame(cnts_mat[,colnames(cnts_mat) == 'Mir1955'])
row.names(test1) = row.names(cnts_mat)
test1$cond = ifelse(grepl('PBS', row.names(test1)),  'Cntl', 'Treated') 
write.csv(res_table, file = 'results from limma on Treated over Cntl.csv', row.names = F)

res1 = res_table
head(res1)
#need to play around to assessing proper thresholds.  
label_key = res1$ID[res1$P.Value<0.0001]
res1$label2 = ifelse(res1$ID %in% label_key, paste0(res1$ID), '')
table(res1$label2)
res1$label_col1 = ifelse(res1$logFC < 0, 'blueviolet', 'darkgoldenrod4')
res1$label_col2 = ifelse(res1$P.Value<0.001, paste0(res1$label_col1), 'gray74')
#Number of genes which will be labelled
#Volcano plot
pdf(file = 'Volcano Plot of LPS over Cntl.pdf')
ggplot(res1, aes(x=logFC, y=-log10(P.Value))) + theme_classic() +
  geom_point(aes(x=logFC, y=-log10(P.Value)), color=res1$label_col2) +
  geom_label_repel(aes(x=logFC, y=-log10(P.Value), label = res1$label2), color = res1$label_col2, size = 2, label.size=NA, box.padding = 0.8, point.padding = 0.5, max.overlaps = Inf, alpha = .6, segment.color = 'grey50')  +   ggtitle('Volcano plot Treated over Cntl')
dev.off()

res1$deg_sig = ifelse(res1$adj.P.Val<0.1, 'LPS DE Significant', 'NS')
module_membership$deg_sig = res1$deg_sig[match(module_membership$gene, res1$ID)]
head(module_membership)
binned_sig_prots= module_membership %>%
  dplyr::group_by(module, deg_sig) %>%
  dplyr::summarise(n = n()) %>%
  dplyr::mutate(freq = n / sum(n))

pdf(file = 'Proportion od DEGs per Module.pdf')
ggplot(binned_sig_prots, aes(x=module, y=freq, fill =deg_sig)) + theme_classic2() + geom_col() +theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) + scale_x_continuous(labels = binned_sig_prots$module, breaks = binned_sig_prots$module) + xlab('Module #') + ylab('Proportion of genes') + scale_fill_manual(values=c('darkorchid3', 'gray20')) + ggtitle('Proportion od DEGs per Module')
dev.off()
mm2 = module_membership
mm2 = mm2[mm2$gene %in% res1$ID[res1$adj.P.Val<0.1],]
mm2 = na.omit(mm2)
write.csv(mm2, file = 'Module membership table with DEGS adjp_less0.1 table.csv', row.names = F)


write.csv(res1, 'file = results from limma on Treated over Cntl.csv')

## Gene onthology (GO) Gene set enrichament analysis (GSEA)
library(clusterProfiler)
library(org.Mm.eg.db)

gsea_1 = bitr(rownames(res_table), fromType="SYMBOL", toType="ENTREZID", OrgDb="org.Mm.eg.db")

gsea_1$fc=res_table$logFC[rownames(res_table) %in% gsea_1$SYMBOL]

gsea_2 <- gsea_1$fc

## Name each fold change with the corresponding Entrez ID
names(gsea_2) <-gsea_1$ENTREZID
#Next we need to order the fold changes in decreasing order. To do this we'll use the sort() function, which takes a vector as input. This is in contrast to Tidyverse's arrange(), which requires a data frame.

## Sort fold changes in decreasing order
gsea_2 <- sort(gsea_2, decreasing = TRUE)

head(gsea_2)

gsea_go <- gseGO(geneList     = gsea_2,
                 OrgDb        = org.Mm.eg.db,
                 ont          = "ALL",
                 minGSSize    = 100,
                 maxGSSize    = 500,
                 pvalueCutoff = 0.05,
                 verbose      = FALSE)


dotplot(gsea_go, showCategory=10, split=".sign") + facet_grid(.~.sign) + ggtitle('GSEA top GO terms, LPS vs CTRL')
